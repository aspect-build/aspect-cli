load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("@bazel_gazelle//:def.bzl", "gazelle")
load("@io_bazel_rules_go//go:def.bzl", "nogo")

# When generating the documents for this repo bazel needs to be started so that we can generate
# the correct flags. To do this we need version from .bazelversion
exports_files([
    ".bazelversion",
])

nogo(
    name = "nogo",
    config = "nogo_config.json",
    visibility = ["//visibility:public"],
    deps = [
        "@org_golang_x_tools//go/analysis/passes/asmdecl",
        "@org_golang_x_tools//go/analysis/passes/assign",
        "@org_golang_x_tools//go/analysis/passes/atomic",
        "@org_golang_x_tools//go/analysis/passes/atomicalign",
        "@org_golang_x_tools//go/analysis/passes/bools",
        "@org_golang_x_tools//go/analysis/passes/buildssa",
        "@org_golang_x_tools//go/analysis/passes/buildtag",
        "@org_golang_x_tools//go/analysis/passes/cgocall",
        "@org_golang_x_tools//go/analysis/passes/composite",
        "@org_golang_x_tools//go/analysis/passes/copylock",
        "@org_golang_x_tools//go/analysis/passes/ctrlflow",
        "@org_golang_x_tools//go/analysis/passes/deepequalerrors",
        "@org_golang_x_tools//go/analysis/passes/errorsas",
        "@org_golang_x_tools//go/analysis/passes/findcall",
        "@org_golang_x_tools//go/analysis/passes/framepointer",
        "@org_golang_x_tools//go/analysis/passes/httpresponse",
        "@org_golang_x_tools//go/analysis/passes/ifaceassert",
        "@org_golang_x_tools//go/analysis/passes/inspect",
        "@org_golang_x_tools//go/analysis/passes/loopclosure",
        "@org_golang_x_tools//go/analysis/passes/lostcancel",
        "@org_golang_x_tools//go/analysis/passes/nilfunc",
        "@org_golang_x_tools//go/analysis/passes/nilness",
        "@org_golang_x_tools//go/analysis/passes/pkgfact",
        "@org_golang_x_tools//go/analysis/passes/printf",
        "@org_golang_x_tools//go/analysis/passes/reflectvaluecompare",
        "@org_golang_x_tools//go/analysis/passes/shadow",
        "@org_golang_x_tools//go/analysis/passes/shift",
        "@org_golang_x_tools//go/analysis/passes/sigchanyzer",
        "@org_golang_x_tools//go/analysis/passes/sortslice",
        "@org_golang_x_tools//go/analysis/passes/stdmethods",
        "@org_golang_x_tools//go/analysis/passes/stringintconv",
        "@org_golang_x_tools//go/analysis/passes/structtag",
        "@org_golang_x_tools//go/analysis/passes/testinggoroutine",
        "@org_golang_x_tools//go/analysis/passes/tests",
        "@org_golang_x_tools//go/analysis/passes/unmarshal",
        "@org_golang_x_tools//go/analysis/passes/unreachable",
        "@org_golang_x_tools//go/analysis/passes/unsafeptr",
        "@org_golang_x_tools//go/analysis/passes/unusedresult",
        "@org_golang_x_tools//go/analysis/passes/unusedwrite",
        "@org_golang_x_tools//go/analysis/passes/usesgenerics",
    ],
)

# gazelle:prefix aspect.build/cli
# gazelle:exclude **/*.pb.go
# gazelle:resolve go github.com/bazelbuild/buildtools/edit @com_github_bazelbuild_buildtools//edit:go_default_library

# gazelle-TODO:
#   cannot use :map_kind go_proto_library go_proto_library //:go_proto_library.bzl
#   because we need gazelle to understand the built-in kind, see https://github.com/bazelbuild/bazel-gazelle/issues/1162
#   so instead we are using the aspect-build/rules_go fork which has our write_source_files feature
gazelle(name = "gazelle")

gazelle(
    name = "gazelle_update_repos",
    args = [
        "-from_file=go.mod",
        "-to_macro=go.bzl%deps",
        "-prune",
    ],
    command = "update-repos",
)

# Run this target to update all the generated .pb.go files in the repo:
# bazel run //:update_go_pb
#
# Note that each target also has a corresponding test asserting that the
# generated files stay up-to-date.
# Re-generate this list with:
# bazel 2>/dev/null query 'kind(go_proto_library, //...)' | xargs -I {} buildozer 'add additional_update_targets {}.update_go_pb' //:update_go_pb
write_source_files(
    name = "update_go_pb",
    additional_update_targets = [
        "//bazel/analysis:bazel_go_proto.update_go_pb",
        "//bazel/buildeventstream:buildeventstream_go_proto.update_go_pb",
        "//bazel/command_line:command_line_go_proto.update_go_pb",
        "//bazel/failure_details:failure_details_go_proto.update_go_pb",
        "//bazel/flags:bazel_go_proto.update_go_pb",
        "//bazel/invocation_policy:blaze_invocation_policy_go_proto.update_go_pb",
        "//bazel/options:options_go_proto.update_go_pb",
        "//bazel/query:blaze_query_aspect_mirror_go_proto.update_go_pb",
        "//pkg/plugin/sdk/v1alpha1/proto:proto_go_proto.update_go_pb",
        "//pkg/plugin/sdk/v1alpha2/proto:proto_go_proto.update_go_pb",
        "//pkg/plugin/sdk/v1alpha3/proto:proto_go_proto.update_go_pb",
    ],
)

alias(
    name = "aspect",
    actual = "//cmd/aspect",
)

sh_binary(
    name = "tidy",
    srcs = ["tidy.sh"],
)

alias(
    name = "go",
    actual = "@go_sdk//:bin/go",
)
