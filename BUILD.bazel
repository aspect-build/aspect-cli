load("@aspect_rules_js//js:defs.bzl", "js_library")
load("@bazel_gazelle//:def.bzl", "gazelle")
load("@buildifier_prebuilt//:rules.bzl", "buildifier")
load("@io_bazel_rules_go//go:def.bzl", "nogo")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@rules_shell//shell:sh_binary.bzl", "sh_binary")

npm_link_all_packages(name = "node_modules")

# When generating the documents for this repo bazel needs to be started so that we can generate
# the correct flags. To do this we need version from .bazelversion
exports_files([
    ".bazelversion",
    "LICENSE",
    "README.md",
])

js_library(
    name = "prettierrc",
    srcs = [".prettierrc.cjs"],
    visibility = ["//visibility:public"],
)

nogo(
    name = "nogo",
    config = "nogo_config.json",
    visibility = ["//visibility:public"],
    deps = [
        "@org_golang_x_tools//go/analysis/passes/asmdecl",
        "@org_golang_x_tools//go/analysis/passes/assign",
        "@org_golang_x_tools//go/analysis/passes/atomic",
        "@org_golang_x_tools//go/analysis/passes/atomicalign",
        "@org_golang_x_tools//go/analysis/passes/bools",
        "@org_golang_x_tools//go/analysis/passes/buildssa",
        "@org_golang_x_tools//go/analysis/passes/buildtag",
        "@org_golang_x_tools//go/analysis/passes/composite",
        "@org_golang_x_tools//go/analysis/passes/copylock",
        "@org_golang_x_tools//go/analysis/passes/ctrlflow",
        "@org_golang_x_tools//go/analysis/passes/deepequalerrors",
        "@org_golang_x_tools//go/analysis/passes/errorsas",
        "@org_golang_x_tools//go/analysis/passes/findcall",
        "@org_golang_x_tools//go/analysis/passes/framepointer",
        "@org_golang_x_tools//go/analysis/passes/httpresponse",
        "@org_golang_x_tools//go/analysis/passes/ifaceassert",
        "@org_golang_x_tools//go/analysis/passes/inspect",
        "@org_golang_x_tools//go/analysis/passes/loopclosure",
        "@org_golang_x_tools//go/analysis/passes/lostcancel",
        "@org_golang_x_tools//go/analysis/passes/nilfunc",
        "@org_golang_x_tools//go/analysis/passes/nilness",
        "@org_golang_x_tools//go/analysis/passes/pkgfact",
        "@org_golang_x_tools//go/analysis/passes/printf",
        "@org_golang_x_tools//go/analysis/passes/reflectvaluecompare",
        "@org_golang_x_tools//go/analysis/passes/shift",
        "@org_golang_x_tools//go/analysis/passes/sigchanyzer",
        "@org_golang_x_tools//go/analysis/passes/sortslice",
        "@org_golang_x_tools//go/analysis/passes/stdmethods",
        "@org_golang_x_tools//go/analysis/passes/stringintconv",
        "@org_golang_x_tools//go/analysis/passes/structtag",
        "@org_golang_x_tools//go/analysis/passes/testinggoroutine",
        "@org_golang_x_tools//go/analysis/passes/tests",
        "@org_golang_x_tools//go/analysis/passes/unmarshal",
        "@org_golang_x_tools//go/analysis/passes/unreachable",
        "@org_golang_x_tools//go/analysis/passes/unsafeptr",
        "@org_golang_x_tools//go/analysis/passes/unusedresult",
        "@org_golang_x_tools//go/analysis/passes/usesgenerics",

        # TODO:
        # "@org_golang_x_tools//go/analysis/passes/unusedwrite",

        # Enabling this requires a number of refactors around `err` handling.
        # "@org_golang_x_tools//go/analysis/passes/shadow:go_default_library",

        # Enabling this requires upstream to resolve
        # https://github.com/bazelbuild/rules_go/issues/2396
        # "@org_golang_x_tools//go/analysis/passes/cgocall:go_default_library",
    ],
)

# gazelle:prefix github.com/aspect-build/aspect-cli
# gazelle:exclude **/*.pb.go
# gazelle:resolve go github.com/bazelbuild/buildtools/edit @com_github_bazelbuild_buildtools//edit:go_default_library
# gazelle:resolve go github.com/bazelbuild/buildtools/build @com_github_bazelbuild_buildtools//build:go_default_library

# Use legacy go grpc compilers instead of default v2 (https://github.com/bazel-contrib/bazel-gazelle/commit/e425d46f735e6ccb8c83237f47b4bf338d317a84)
# TODO: upgrade
# gazelle:go_grpc_compilers @io_bazel_rules_go//proto:go_grpc

# Use the gazelle bazel modules instead of go.mod modules
# gazelle:resolve_regexp go github.com/bazelbuild/bazel-gazelle/(.*) @bazel_gazelle//$1:go_default_library
# gazelle:resolve_regexp go github.com/bazel-contrib/rules_python/gazelle/(.*) @rules_python_gazelle_plugin//$1
# gazelle:resolve_regexp go github.com/bazelbuild/rules_go/(.*) @io_bazel_rules_go//$1

# gazelle-TODO:
#   cannot use :map_kind go_proto_library go_proto_library //:go_proto_library.bzl
#   because we need gazelle to understand the built-in kind, see https://github.com/bazelbuild/bazel-gazelle/issues/1162
#   so instead we are using the aspect-build/rules_go fork which has our write_source_files feature
gazelle(name = "gazelle")

alias(
    name = "aspect",
    actual = "//cmd/aspect",
)

sh_binary(
    name = "tidy",
    srcs = ["tidy.sh"],
)

alias(
    name = "go",
    actual = "@go_sdk//:bin/go",
)

buildifier(
    name = "buildifier",
    exclude_patterns = ["./.git/*"],
    lint_mode = "fix",
    mode = "fix",
)

buildifier(
    name = "buildifier.check",
    exclude_patterns = ["./.git/*"],
    lint_mode = "warn",
    mode = "diff",
)

alias(
    name = "format",
    actual = "//tools:format",
)
