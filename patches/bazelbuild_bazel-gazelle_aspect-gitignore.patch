diff --git a/walk/config.go b/walk/config.go
index e5b52e8..ce434ef 100644
--- a/walk/config.go
+++ b/walk/config.go
@@ -174,6 +174,8 @@ type ignoreFilter struct {
 	ignorePaths          map[string]struct{}
 }
 
+type isGitIgnoredFunc = func(string, bool) bool
+
 func newIgnoreFilter(repoRoot string) *ignoreFilter {
 	bazelignorePaths, err := loadBazelIgnore(repoRoot)
 	if err != nil {
diff --git a/walk/walk.go b/walk/walk.go
index 3a6de86..f977519 100644
--- a/walk/walk.go
+++ b/walk/walk.go
@@ -177,6 +177,22 @@ func visit(c *config.Config, cexts []config.Configurer, knownDirectives map[stri
 		return nil, false
 	}
 
+	// PATCH(gitignore) ---
+	// Process any new .gitignore files
+	if _, hasGitIgnore := entsMap[".gitignore"]; hasGitIgnore {
+		if ignoreProcessor, hasGitIgnoreProcessor := c.Exts["__aspect:processGitignoreFile"]; hasGitIgnoreProcessor {
+			ignoreProcessor.(func(*config.Config, string))(c, path.Join(rel, ".gitignore"))
+		}
+	}
+
+	// Fetch any configured gitignore filters
+	var isGitIgnored isGitIgnoredFunc
+	isGitIgnoredExt, hasGitIgnore := c.Exts["__aspect:gitignore"]
+	if hasGitIgnore && isGitIgnoredExt != nil {
+		isGitIgnored = isGitIgnoredExt.(isGitIgnoredFunc)
+	}
+	// END PATCH(gitignore) ---
+
 	// Filter and collect files
 	var regularFiles []string
 	for _, ent := range trie.files {
@@ -185,6 +201,13 @@ func visit(c *config.Config, cexts []config.Configurer, knownDirectives map[stri
 		if wc.isExcluded(entRel) {
 			continue
 		}
+
+		// PATCH(gitignore) ---
+		if isGitIgnored != nil && isGitIgnored(entRel, ent.IsDir()) {
+			continue
+		}
+		// END PATCH(gitignore) ---
+
 		if shouldFollow(wc, dir, entRel, ent) {
 			regularFiles = append(regularFiles, base)
 		}
@@ -200,6 +223,13 @@ func visit(c *config.Config, cexts []config.Configurer, knownDirectives map[stri
 		if wc.isExcluded(entRel) {
 			continue
 		}
+
+		// PATCH(gitignore) ---
+		if isGitIgnored != nil && isGitIgnored(entRel, t.entry.IsDir()) {
+			continue
+		}
+		// END PATCH(gitignore) ---
+
 		if shouldFollow(wc, dir, entRel, t.entry) {
 			if updateRels.shouldVisit(entRel, shouldUpdate) {
 				subFiles, shouldMerge := visit(c.Clone(), cexts, knownDirectives, updateRels, t, wf, entRel, shouldUpdate)
