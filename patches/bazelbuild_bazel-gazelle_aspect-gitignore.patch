diff --git a/walk/config.go b/walk/config.go
index 67d2c16..07cfea5 100644
--- a/walk/config.go
+++ b/walk/config.go
@@ -58,6 +58,12 @@ type walkConfig struct {
 	ignore              bool
 	follow              []string
 	validBuildFileNames []string // to be copied to config.Config
+
+	// PATCH(gitignore) ---
+	isGitIgnoreDisabled bool
+	gitIgnoreData       interface{}
+	isGitIgnoredExt     func(string, bool) bool
+	// END PATCH(gitignore) ---
 }
 
 const (
@@ -79,6 +85,18 @@ func (wc *walkConfig) clone() *walkConfig {
 	return &wcCopy
 }
 
+// PATCH(gitignore) ---
+func (wc *walkConfig) isGitIgnored(p string, isDir bool) bool {
+	if wc.isGitIgnoreDisabled {
+		return false
+	}
+	if wc.isGitIgnoredExt == nil {
+		return false
+	}
+	return wc.isGitIgnoredExt(p, isDir)
+	// END PATCH(gitignore) ---
+}
+
 func (wc *walkConfig) isExcludedDir(p string) bool {
 	return path.Base(p) == ".git" || wc.ignoreFilter.isDirectoryIgnored(p) || matchAnyGlob(wc.excludes, p)
 }
@@ -139,7 +157,8 @@ func (cr *Configurer) CheckFlags(_ *flag.FlagSet, c *config.Config) error {
 }
 
 func (*Configurer) KnownDirectives() []string {
-	return []string{"build_file_name", "generation_mode", "exclude", "follow", "ignore"}
+	// PATCH(gitignore) ---
+	return []string{"build_file_name", "generation_mode", "exclude", "follow", "ignore", "gitignore"}
 }
 
 func (cr *Configurer) Configure(c *config.Config, rel string, f *rule.File) {
@@ -202,6 +221,9 @@ func configureForWalk(parent *walkConfig, rel string, f *rule.File) *walkConfig
 					log.Printf("the ignore directive does not take any arguments. Did you mean to use gazelle:exclude instead? in //%s '# gazelle:ignore %s'", f.Pkg, d.Value)
 				}
 				wc.ignore = true
+			case "gitignore":
+				// PATCH(gitignore) ---
+				wc.isGitIgnoreDisabled = d.Value != "enabled"
 			}
 		}
 	}
diff --git a/walk/dirinfo.go b/walk/dirinfo.go
index 9f7387c..7da124a 100644
--- a/walk/dirinfo.go
+++ b/walk/dirinfo.go
@@ -11,6 +11,17 @@ import (
 	"github.com/bazelbuild/bazel-gazelle/rule"
 )
 
+// PATCH(gitignore) ---
+type GitIgnoreProcessor func(r, p string, d interface{}) (func(p string, isDir bool) bool, interface{})
+
+var gitignoreProcessor GitIgnoreProcessor
+
+func SetGitIgnoreProcessor(p GitIgnoreProcessor) {
+	gitignoreProcessor = p
+}
+
+// END-PATCH(gitignore) ---
+
 // DirInfo holds all the information about a directory that Walk2 needs.
 type DirInfo struct {
 	// Subdirs and RegularFiles hold the names of subdirectories and regular files
@@ -70,6 +81,19 @@ func (w *walker) loadDirInfo(rel string) (DirInfo, error) {
 	}
 
 	info.config = configureForWalk(parentConfig, rel, info.File)
+
+	// PATCH(gitignore) ---
+	if gitignoreProcessor != nil {
+		// Process any new .gitignore files
+		for _, entry := range entries {
+			if entry.Name() == ".gitignore" {
+				info.config.isGitIgnoredExt, info.config.gitIgnoreData = gitignoreProcessor(w.rootConfig.RepoRoot, filepath.Join(rel, entry.Name()), parentConfig.gitIgnoreData)
+				break
+			}
+		}
+	}
+	// END-PATCH(gitignore) ---
+
 	if info.config.isExcludedDir(rel) {
 		// Build file excludes the current directory. Ignore contents.
 		entries = nil
@@ -78,6 +102,13 @@ func (w *walker) loadDirInfo(rel string) (DirInfo, error) {
 	for _, e := range entries {
 		entryRel := path.Join(rel, e.Name())
 		e = maybeResolveSymlink(info.config, dir, entryRel, e)
+
+		// PATCH(gitignore) ---
+		if info.config.isGitIgnored(entryRel, e.IsDir()) {
+			continue
+		}
+		// END-PATCH(gitignore) ---
+
 		if e.IsDir() && !info.config.isExcludedDir(entryRel) {
 			info.Subdirs = append(info.Subdirs, e.Name())
 		} else if !e.IsDir() && !info.config.isExcludedFile(entryRel) {
