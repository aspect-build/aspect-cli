load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load(":command_list.bzl", "COMMAND_LIST")

_DOCS = ["aspect.md"] + [
    "aspect_{}.md".format(cmd)
    for cmd in COMMAND_LIST
]

genrule(
    name = "command_list_bzl",
    # We need to be able to start bazel so that we can get the correct flags
    srcs = [
        "//:.bazelversion",
    ],
    outs = ["command_list.bzl"],
    cmd = "export HOME=$$(pwd); touch WORKSPACE; $(execpath //cmd/docgen) bzl-command-list > $@",
    tools = ["//cmd/docgen"],
)

write_file(
    name = "gen_command_list_update",
    out = "command_list_update.sh",
    content = [
        "#!/usr/bin/env bash",
        "set -o errexit -o nounset -o pipefail",
        "cd $BUILD_WORKSPACE_DIRECTORY",
        "cp -fv bazel-bin/docs/command_list.bzl docs/command_list.bzl",
    ],
)

sh_binary(
    name = "command_list_update",
    srcs = ["command_list_update.sh"],
    data = [":command_list_bzl"],
)

genrule(
    name = "docgen",
    # We need to be able to start bazel so that we can get the correct flags
    srcs = [
        "//:.bazelversion",
    ],
    outs = ["gen/" + d for d in _DOCS],
    cmd = "export HOME=$$(pwd); touch WORKSPACE; $(execpath //cmd/docgen) gen-markdown --output-dir $(@D)/gen",
    tools = ["//cmd/docgen"],
)

# Help developers who get a red CI result by telling them how to fix it
_failure_message = "\nPlease update the docs by running\n    bazel run //docs:update"

[
    diff_test(
        name = "check_" + file,
        failure_message = _failure_message,
        file1 = "gen/" + file,
        file2 = file,
    )
    for file in _DOCS
]

write_file(
    name = "gen_update",
    out = "update.sh",
    content = [
        "#!/usr/bin/env bash",
        "set -o errexit -o nounset -o pipefail",
        "cd $BUILD_WORKSPACE_DIRECTORY",
    ] + [
        "cp -fv bazel-bin/docs/gen/{0} docs/{0}".format(file)
        for file in _DOCS
    ],
)

sh_binary(
    name = "update",
    srcs = ["update.sh"],
    data = ["gen/" + d for d in _DOCS],
)
