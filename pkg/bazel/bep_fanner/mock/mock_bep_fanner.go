// Code generated by MockGen. DO NOT EDIT.
// Source: aspect.build/cli/pkg/bazel/bep_fanner (interfaces: BEPFanner)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	bep_fanner "aspect.build/cli/pkg/bazel/bep_fanner"
	gomock "github.com/golang/mock/gomock"
	v1 "google.golang.org/genproto/googleapis/devtools/build/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockBEPFanner is a mock of BEPFanner interface.
type MockBEPFanner struct {
	ctrl     *gomock.Controller
	recorder *MockBEPFannerMockRecorder
}

// MockBEPFannerMockRecorder is the mock recorder for MockBEPFanner.
type MockBEPFannerMockRecorder struct {
	mock *MockBEPFanner
}

// NewMockBEPFanner creates a new mock instance.
func NewMockBEPFanner(ctrl *gomock.Controller) *MockBEPFanner {
	mock := &MockBEPFanner{ctrl: ctrl}
	mock.recorder = &MockBEPFannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBEPFanner) EXPECT() *MockBEPFannerMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockBEPFanner) Configure(arg0 []*bep_fanner.ConfigStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockBEPFannerMockRecorder) Configure(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockBEPFanner)(nil).Configure), arg0)
}

// PublishBuildToolEventStream mocks base method.
func (m *MockBEPFanner) PublishBuildToolEventStream(arg0 v1.PublishBuildEvent_PublishBuildToolEventStreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishBuildToolEventStream", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishBuildToolEventStream indicates an expected call of PublishBuildToolEventStream.
func (mr *MockBEPFannerMockRecorder) PublishBuildToolEventStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishBuildToolEventStream", reflect.TypeOf((*MockBEPFanner)(nil).PublishBuildToolEventStream), arg0)
}

// PublishLifecycleEvent mocks base method.
func (m *MockBEPFanner) PublishLifecycleEvent(arg0 context.Context, arg1 *v1.PublishLifecycleEventRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishLifecycleEvent", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishLifecycleEvent indicates an expected call of PublishLifecycleEvent.
func (mr *MockBEPFannerMockRecorder) PublishLifecycleEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishLifecycleEvent", reflect.TypeOf((*MockBEPFanner)(nil).PublishLifecycleEvent), arg0, arg1)
}
