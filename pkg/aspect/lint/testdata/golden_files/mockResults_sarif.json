[
  {
    "runs": [
      {
        "originalUriBaseIds": null,
        "results": [
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/check.repository.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 4
                  }
                }
              }
            ],
            "message": {
              "text": "Imports should be sorted alphabetically. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/check.repository.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 6
                  }
                }
              }
            ],
            "message": {
              "text": "Imports should be sorted alphabetically. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/check.repository.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 7
                  }
                }
              }
            ],
            "message": {
              "text": "Imports should be sorted alphabetically. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/check.repository.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 8
                  }
                }
              }
            ],
            "message": {
              "text": "Imports should be sorted alphabetically. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/check.repository.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 9
                  }
                }
              }
            ],
            "message": {
              "text": "Imports should be sorted alphabetically. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/check.repository.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 6,
                    "startLine": 11
                  }
                }
              }
            ],
            "message": {
              "text": "'GitHubComment' is defined but never used. (@typescript-eslint/no-unused-vars)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/check.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 4
                  }
                }
              }
            ],
            "message": {
              "text": "Imports should be sorted alphabetically. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.repository.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 2
                  }
                }
              }
            ],
            "message": {
              "text": "Expected 'multiple' syntax before 'single' syntax. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.repository.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 4
                  }
                }
              }
            ],
            "message": {
              "text": "Imports should be sorted alphabetically. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.repository.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 6
                  }
                }
              }
            ],
            "message": {
              "text": "Imports should be sorted alphabetically. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.repository.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 8
                  }
                }
              }
            ],
            "message": {
              "text": "Imports should be sorted alphabetically. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.repository.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 10
                  }
                }
              }
            ],
            "message": {
              "text": "Expected 'multiple' syntax before 'single' syntax. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.repository.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 16
                  }
                }
              }
            ],
            "message": {
              "text": "Expected 'multiple' syntax before 'single' syntax. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.repository.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 19,
                    "startLine": 445
                  }
                }
              }
            ],
            "message": {
              "text": "'result' is assigned a value but never used. (@typescript-eslint/no-unused-vars)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 3
                  }
                }
              }
            ],
            "message": {
              "text": "Expected 'multiple' syntax before 'single' syntax. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 17,
                    "startLine": 3
                  }
                }
              }
            ],
            "message": {
              "text": "'CIHost' is defined but never used. (@typescript-eslint/no-unused-vars)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 6
                  }
                }
              }
            ],
            "message": {
              "text": "Expected 'multiple' syntax before 'single' syntax. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/task-results.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 2
                  }
                }
              }
            ],
            "message": {
              "text": "Expected 'multiple' syntax before 'single' syntax. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/task-results.spec.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 13,
                    "startLine": 919
                  }
                }
              }
            ],
            "message": {
              "text": "Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free. (@typescript-eslint/ban-ts-comment)"
            }
          }
        ],
        "tool": {
          "driver": {
            "fullName": "",
            "informationUri": "",
            "name": "ESLint",
            "rules": null
          }
        }
      }
    ]
  },
  {
    "runs": [
      {
        "originalUriBaseIds": null,
        "results": [
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/check.repository.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 3
                  }
                }
              }
            ],
            "message": {
              "text": "Expected 'multiple' syntax before 'single' syntax. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/check.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 2
                  }
                }
              }
            ],
            "message": {
              "text": "Expected 'multiple' syntax before 'single' syntax. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/check.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 4
                  }
                }
              }
            ],
            "message": {
              "text": "Expected 'multiple' syntax before 'single' syntax. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/check.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 18,
                    "startLine": 105
                  }
                }
              }
            ],
            "message": {
              "text": "Unexpected constant truthiness on the left-hand side of a `||` expression. (no-constant-binary-expression)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.repository.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 2
                  }
                }
              }
            ],
            "message": {
              "text": "Expected 'multiple' syntax before 'single' syntax. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.repository.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 4
                  }
                }
              }
            ],
            "message": {
              "text": "Imports should be sorted alphabetically. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.repository.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 6
                  }
                }
              }
            ],
            "message": {
              "text": "Expected 'multiple' syntax before 'single' syntax. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.repository.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 8
                  }
                }
              }
            ],
            "message": {
              "text": "Expected 'multiple' syntax before 'single' syntax. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.repository.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 25,
                    "startLine": 313
                  }
                }
              }
            ],
            "message": {
              "text": "Empty block statement. (no-empty)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 2
                  }
                }
              }
            ],
            "message": {
              "text": "Expected 'multiple' syntax before 'single' syntax. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 3
                  }
                }
              }
            ],
            "message": {
              "text": "Imports should be sorted alphabetically. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 5
                  }
                }
              }
            ],
            "message": {
              "text": "Expected 'multiple' syntax before 'single' syntax. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/comment.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 7
                  }
                }
              }
            ],
            "message": {
              "text": "Expected 'multiple' syntax before 'single' syntax. (sort-imports)"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "workflows/marvin/domain/task-results.ts",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 2
                  }
                }
              }
            ],
            "message": {
              "text": "Imports should be sorted alphabetically. (sort-imports)"
            }
          }
        ],
        "tool": {
          "driver": {
            "fullName": "",
            "informationUri": "",
            "name": "ESLint",
            "rules": null
          }
        }
      }
    ]
  },
  {
    "runs": [
      {
        "originalUriBaseIds": null,
        "results": [
          {
            "level": "warning",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "speller/announce/announce.cc",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 16,
                    "startLine": 19
                  }
                }
              }
            ],
            "message": {
              "text": "function is not thread safe [concurrency-mt-unsafe]"
            }
          },
          {
            "level": "warning",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "speller/announce/announce.cc",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 29,
                    "startLine": 19
                  }
                }
              }
            ],
            "message": {
              "text": "function is not thread safe [concurrency-mt-unsafe]"
            }
          }
        ],
        "tool": {
          "driver": {
            "fullName": "",
            "informationUri": "",
            "name": "ClangTidy",
            "rules": null
          }
        }
      }
    ]
  },
  {
    "runs": [
      {
        "originalUriBaseIds": null,
        "results": [
          {
            "level": "warning",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "docs/delivery.sh",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 8
                  }
                }
              }
            ],
            "message": {
              "text": "BAR is referenced but not assigned."
            }
          }
        ],
        "tool": {
          "driver": {
            "fullName": "",
            "informationUri": "",
            "name": "ShellCheck",
            "rules": null
          }
        }
      }
    ]
  },
  {
    "runs": [
      {
        "originalUriBaseIds": null,
        "results": [
          {
            "level": "warning",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "integration_tests/runner.sh",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 15
                  }
                }
              }
            ],
            "message": {
              "text": "TEST_TIMEOUT is referenced but not assigned."
            }
          },
          {
            "level": "warning",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "integration_tests/runner.sh",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 16
                  }
                }
              }
            ],
            "message": {
              "text": "TEST_TMPDIR is referenced but not assigned."
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "integration_tests/runner.sh",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 18
                  }
                }
              }
            ],
            "message": {
              "text": "BIN is referenced but not assigned."
            }
          }
        ],
        "tool": {
          "driver": {
            "fullName": "",
            "informationUri": "",
            "name": "ShellCheck",
            "rules": null
          }
        }
      }
    ]
  },
  {
    "runs": [
      {
        "originalUriBaseIds": null,
        "results": [
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "src/hello.css",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 5,
                    "startLine": 11
                  }
                }
              }
            ],
            "message": {
              "text": "Unexpected empty block (block-no-empty)"
            }
          },
          {
            "level": "warning",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "src/hello.css",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 3,
                    "startLine": 16
                  }
                }
              }
            ],
            "message": {
              "text": "Unexpected duplicate \"color\" (declaration-block-no-duplicate-properties)"
            }
          }
        ],
        "tool": {
          "driver": {
            "fullName": "",
            "informationUri": "",
            "name": "Stylelint",
            "rules": null
          }
        }
      }
    ]
  },
  {
    "runs": [
      {
        "originalUriBaseIds": null,
        "results": [
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "monopi/lib/py/os/gpu.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 1
                  }
                }
              }
            ],
            "message": {
              "text": "I001 [*] Import block is un-sorted or un-formatted"
            }
          }
        ],
        "tool": {
          "driver": {
            "fullName": "",
            "informationUri": "",
            "name": "Ruff",
            "rules": null
          }
        }
      }
    ]
  },
  {
    "runs": [
      {
        "originalUriBaseIds": null,
        "results": [
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "monopi/lib/py/os/gpu.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 1
                  }
                }
              }
            ],
            "message": {
              "text": "I001 [*] Import block is un-sorted or un-formatted"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "monopi/lib/py/os/gpu.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 5,
                    "startLine": 38
                  }
                }
              }
            ],
            "message": {
              "text": "E722 Do not use bare `except`"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "monopi/lib/py/os/gpu.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 5,
                    "startLine": 58
                  }
                }
              }
            ],
            "message": {
              "text": "F841 Local variable `x` is assigned to but never used"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "monopi/lib/py/os/gpu.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 7,
                    "startLine": 61
                  }
                }
              }
            ],
            "message": {
              "text": "UP031 Use format specifiers instead of percent format"
            }
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "monopi/lib/py/os/gpu.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 50
                  }
                }
              }
            ],
            "message": {
              "text": "W293 [*] Blank line contains whitespace"
            }
          }
        ],
        "tool": {
          "driver": {
            "fullName": "",
            "informationUri": "",
            "name": "Ruff",
            "rules": null
          }
        }
      }
    ]
  },
  {
    "runs": [
      {
        "originalUriBaseIds": null,
        "results": [
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 5
                  }
                }
              }
            ],
            "message": {
              "text": "Extra separation in import group before 'com.fasterxml.jackson.annotation.JsonIgnore'"
            },
            "ruleId": "import.groups.separated.internally"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 5
                  }
                }
              }
            ],
            "message": {
              "text": "Wrong order for 'com.fasterxml.jackson.annotation.JsonIgnore' import."
            },
            "ruleId": "import.ordering"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 20
                  }
                }
              }
            ],
            "message": {
              "text": "Missing a Javadoc comment."
            },
            "ruleId": "javadoc.missing"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 78,
                    "startLine": 22
                  }
                }
              }
            ],
            "message": {
              "text": "'(' is followed by whitespace."
            },
            "ruleId": "ws.followed"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 80,
                    "startLine": 22
                  }
                }
              }
            ],
            "message": {
              "text": "')' is preceded with whitespace."
            },
            "ruleId": "ws.preceded"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 78,
                    "startLine": 23
                  }
                }
              }
            ],
            "message": {
              "text": "'(' is followed by whitespace."
            },
            "ruleId": "ws.followed"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 80,
                    "startLine": 23
                  }
                }
              }
            ],
            "message": {
              "text": "')' is preceded with whitespace."
            },
            "ruleId": "ws.preceded"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 1,
                    "startLine": 34
                  }
                }
              }
            ],
            "message": {
              "text": "Line contains a tab character."
            },
            "ruleId": "containsTab"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startLine": 38
                  }
                }
              }
            ],
            "message": {
              "text": "Line is longer than 160 characters (found 262)."
            },
            "ruleId": "maxLineLen"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 3,
                    "startLine": 78
                  }
                }
              }
            ],
            "message": {
              "text": "Class 'PageKeys' looks like designed for extension (can be subclassed), but the method 'encrypt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PageKeys' final or making the method 'encrypt' static/final/abstract/empty, or adding allowed annotation for the method."
            },
            "ruleId": "design.forExtension"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 3,
                    "startLine": 114
                  }
                }
              }
            ],
            "message": {
              "text": "Class 'PageKeys' looks like designed for extension (can be subclassed), but the method 'decrypt' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'PageKeys' final or making the method 'decrypt' static/final/abstract/empty, or adding allowed annotation for the method."
            },
            "ruleId": "design.forExtension"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 5,
                    "startLine": 162
                  }
                }
              }
            ],
            "message": {
              "text": "Missing a Javadoc comment."
            },
            "ruleId": "javadoc.missing"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 24,
                    "startLine": 169
                  }
                }
              }
            ],
            "message": {
              "text": "'{' is not followed by whitespace."
            },
            "ruleId": "ws.notFollowed"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 25,
                    "startLine": 169
                  }
                }
              }
            ],
            "message": {
              "text": "'}' is not preceded with whitespace."
            },
            "ruleId": "ws.notPreceded"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 7,
                    "startLine": 171
                  }
                }
              }
            ],
            "message": {
              "text": "Class 'Builder' looks like designed for extension (can be subclassed), but the method 'customerId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'customerId' static/final/abstract/empty, or adding allowed annotation for the method."
            },
            "ruleId": "design.forExtension"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 7,
                    "startLine": 176
                  }
                }
              }
            ],
            "message": {
              "text": "Class 'Builder' looks like designed for extension (can be subclassed), but the method 'userId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'userId' static/final/abstract/empty, or adding allowed annotation for the method."
            },
            "ruleId": "design.forExtension"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 7,
                    "startLine": 187
                  }
                }
              }
            ],
            "message": {
              "text": "Class 'Builder' looks like designed for extension (can be subclassed), but the method 'length' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'length' static/final/abstract/empty, or adding allowed annotation for the method."
            },
            "ruleId": "design.forExtension"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 7,
                    "startLine": 192
                  }
                }
              }
            ],
            "message": {
              "text": "Class 'Builder' looks like designed for extension (can be subclassed), but the method 'methodName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'methodName' static/final/abstract/empty, or adding allowed annotation for the method."
            },
            "ruleId": "design.forExtension"
          },
          {
            "level": "error",
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "/mnt/ephemeral/output/platform/__main__/sandbox/linux-sandbox/6210/execroot/com_vectara_platform/apiv2/common/src/main/java/com/vectara/apiv2/common/paging/PageKeys.java",
                    "uriBaseId": ""
                  },
                  "region": {
                    "startColumn": 7,
                    "startLine": 197
                  }
                }
              }
            ],
            "message": {
              "text": "Class 'Builder' looks like designed for extension (can be subclassed), but the method 'build' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Builder' final or making the method 'build' static/final/abstract/empty, or adding allowed annotation for the method."
            },
            "ruleId": "design.forExtension"
          }
        ],
        "tool": {
          "driver": {
            "fullName": "Checkstyle",
            "informationUri": "https://checkstyle.org/",
            "name": "Checkstyle",
            "rules": []
          }
        }
      }
    ]
  }
]