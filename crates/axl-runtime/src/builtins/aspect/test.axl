def _test_impl(ctx):
    stdout = ctx.std.io.stdout
    stderr = ctx.std.io.stderr
    targets = ctx.args.targets or ["//..."]
    test = ctx.bazel.build(
        bazel_flags = [
            "--isatty=" + str(int(stdout.is_tty)),
            "--curses=yes",
        ],
        events = True,
        bazel_verb = "test",
        *targets
    )
    events = test.events()
    for timer in forever(17):
        event = events.poll()
        if event != None:
            print(debug(event.kind))

            if event.kind == "progress":
                stdout.write(event.payload.stdout)
                stdout.flush()
                stderr.write(event.payload.stderr)
                stderr.flush()

            elif event.kind == "build_finished":
                break
                
        else:
            print(timer)


test = task(
    implementation = _test_impl,
    args = {
        # TODO: support a long --pattern_file like bazel does.
        "targets": args.positional(minimum = 1, maximum = 512),
    }
)
