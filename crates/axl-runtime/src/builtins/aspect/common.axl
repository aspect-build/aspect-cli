def _fancy_tui(ctx: task_context, build) -> int:
    events = build.events()
    offset = 0
    in_flight = {}
    last_drawn_lines = 0

    def clear():
        if last_drawn_lines:
            print("\033[1A" * (last_drawn_lines) + "\033[J\033[1A")

    rate = 60
    tick_ms = 1000 // 60

    for timer in forever(tick_ms):
        event = events.poll()

        if event != None:
            print(debug(event.kind))
            print(debug(event.id))

            if event.kind == "target_configured":
                in_flight[event.id.label] = timer

            elif event.kind == "target_completed":
                start = in_flight.pop(event.id.label, None)
                print("Built {} in {} ticks".format(event.id.label, (timer - start)))

            elif event.kind == "progress":
                clear()
                last_drawn_lines = 0

                ctx.std.io.stdout.write(event.payload.stdout)
                ctx.std.io.stdout.flush()

                ctx.std.io.stderr.write(event.payload.stderr)
                ctx.std.io.stderr.flush()

            elif event.kind == "build_finished":
                exit = build.wait()
                return exit.code

        elif timer % 60 == 0 and in_flight:
            clear()

            for k, t in in_flight.items():
                print("-", k, ((timer - t) // 60))

            last_drawn_lines = len(in_flight)
            offset = (offset + 1) % len(in_flight)

def _simple_tui(ctx: task_context, build) -> int:
    for event in build.events():
        if event.kind == "progress":
            ctx.std.io.stdout.write(event.payload.stdout)
            ctx.std.io.stdout.flush()
            ctx.std.io.stderr.write(event.payload.stderr)
            ctx.std.io.stderr.flush()

    exit = build.wait()
    return exit.code


def tui(ctx: task_context, build) -> int:
    stdout = ctx.std.io.stdout
    if stdout.is_tty:
        return _fancy_tui(ctx, build)

    else:
        return _simple_tui(ctx, build)

