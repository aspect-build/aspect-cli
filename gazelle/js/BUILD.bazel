load("@bazel_gazelle//:def.bzl", "gazelle_binary", "gazelle_generation_test")
load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

# Disable the JS extension
# gazelle:js disabled

go_library(
    name = "js",
    srcs = [
        "config.go",
        "configure.go",
        "fix.go",
        "generate.go",
        "kinds.go",
        "language.go",
        "log.go",
        "parser.go",
        "resolve.go",
        "target.go",
        "walk.go",
    ],
    importpath = "aspect.build/cli/gazelle/js",
    visibility = ["//visibility:public"],
    deps = [
        "//gazelle/js/git",
        "//gazelle/js/node",
        "//gazelle/js/pnpm",
        "//gazelle/js/typescript",
        "@bazel_gazelle//config:go_default_library",
        "@bazel_gazelle//label:go_default_library",
        "@bazel_gazelle//language:go_default_library",
        "@bazel_gazelle//repo:go_default_library",
        "@bazel_gazelle//resolve:go_default_library",
        "@bazel_gazelle//rule:go_default_library",
        "@bazel_gazelle//walk:go_default_library",
        "@com_github_bazelbuild_buildtools//build:go_default_library",
        "@com_github_bmatcuk_doublestar_v4//:doublestar",
        "@com_github_emirpasic_gods//maps/linkedhashmap",
        "@com_github_emirpasic_gods//maps/treemap",
        "@com_github_emirpasic_gods//sets/treeset",
        "@com_github_emirpasic_gods//utils",
        "@com_github_evanw_esbuild//pkg/api",
        "@com_github_sirupsen_logrus//:logrus",
    ],
)

go_test(
    name = "js_test",
    srcs = [
        "generate_test.go",
        "parser_test.go",
    ],
    embed = [":js"],
)

# Internal only for tests
gazelle_binary(
    name = "gazelle_js_binary",
    languages = [":js"],
    visibility = ["//visibility:private"],
)

# A separate generation test for each tests/* test case
[
    gazelle_generation_test(
        name = "%s_test" % test_workspace.replace("/WORKSPACE", "").replace("tests/", ""),
        size = "small",
        gazelle_binary = "gazelle_js_binary",
        test_data = [
            ":_%s-data" % test_workspace.replace("/WORKSPACE", "").replace("tests/", ""),
        ],
    )
    for test_workspace in glob(["tests/**/WORKSPACE"])
]

# Data for each generation test
[
    filegroup(
        name = "_%s-data" % test_workspace.replace("/WORKSPACE", "").replace("tests/", ""),
        srcs = glob(
            ["%s/**" % test_workspace.replace("/WORKSPACE", "")],
            exclude = ["%s/**/.test-*"],
        ) + [s.replace(".test-", ".") for s in glob(["**/.test-*"])],
        visibility = ["//visibility:private"],
    )
    for test_workspace in glob(["tests/**/WORKSPACE"])
]

[
    genrule(
        name = s.replace("/", "_").replace(".", "_"),
        srcs = [s],
        outs = [s.replace(".test-", ".")],
        cmd = "cat $(location %s) > $@" % s,
        visibility = ["//visibility:private"],
    )
    for s in glob(["**/.test-*"])
]
