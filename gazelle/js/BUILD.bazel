load("@bazel_gazelle//:def.bzl", "gazelle_binary")
load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
load("//gazelle:gazelle.bzl", "gazelle_generation_test")

# Disable the JS extension
# gazelle:js disabled
# gazelle:exclude tests/

go_library(
    name = "js",
    srcs = [
        "config.go",
        "configure.go",
        "fix.go",
        "generate.go",
        "kinds.go",
        "language.go",
        "resolve.go",
        "target.go",
    ],
    importpath = "aspect.build/cli/gazelle/js",
    visibility = ["//visibility:public"],
    deps = [
        "//gazelle/common",
        "//gazelle/common/git",
        "//gazelle/common/starlark",
        "//gazelle/js/node",
        "//gazelle/js/parser",
        "//gazelle/js/pnpm",
        "//gazelle/js/proto",
        "//gazelle/js/typescript",
        "//pkg/logger",
        "@bazel_gazelle//config:go_default_library",
        "@bazel_gazelle//label:go_default_library",
        "@bazel_gazelle//language:go_default_library",
        "@bazel_gazelle//repo:go_default_library",
        "@bazel_gazelle//resolve:go_default_library",
        "@bazel_gazelle//rule:go_default_library",
        "@com_github_bmatcuk_doublestar_v4//:doublestar",
        "@com_github_emirpasic_gods//maps/linkedhashmap",
        "@com_github_emirpasic_gods//maps/treemap",
        "@com_github_emirpasic_gods//sets/treeset",
        "@com_github_emirpasic_gods//utils",
    ],
)

go_test(
    name = "js_test",
    srcs = ["generate_test.go"],
    embed = [":js"],
)

# The gazelle binary to run local gazelle tests.
# Internal only for tests.
gazelle_binary(
    name = "gazelle_js_binary",
    languages = [
        "@bazel_gazelle//language/proto:go_default_library",
        ":js",
    ],
    visibility = ["//visibility:private"],
)

# A separate generation test for each tests/* test case
[
    gazelle_generation_test(
        name = "%s_test" % test_workspace.replace("/WORKSPACE", "").replace("tests/", ""),
        dir = test_workspace.replace("/WORKSPACE", ""),
        gazelle_binary = "gazelle_js_binary",
    )
    for test_workspace in glob(["tests/**/WORKSPACE"])
]

# A subset of tests that are run with flags disabling some of the
# gazelle patches provided by the aspect-cli that which may not be present in regular
# gazelle_binary()s in other repos.
[
    gazelle_generation_test(
        name = "%s_unpatched_test" % test_workspace.replace("/WORKSPACE", "").replace("tests/", ""),
        dir = test_workspace.replace("/WORKSPACE", ""),
        env = {
            "__aspect_walksubdir_optout__": "true",
        },
        gazelle_binary = "gazelle_js_binary",
    )
    for test_workspace in [
        "tests/gazelle_exclude_directive",
        "tests/gazelle_generation_mode",
        "tests/gazelle_generate_build",
        "tests/tests_simple",
        "tests/tests_subdir",
        "tests/tests_subproject",
    ]
]
